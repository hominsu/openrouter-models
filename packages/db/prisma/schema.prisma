// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  output          = "../src/generated/client"
}

generator zod {
  provider    = "zod-prisma"
  output      = "../src/generated/zod"
  modelSuffix = ""
}

datasource db {
  provider  = "sqlite"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Model {
  id                 String            @id
  name               String
  created            DateTime
  description        String?
  context_length     Int?
  architecture       Architecture?
  pricing            Pricing?
  top_provider       TopProvider?
  per_request_limits PerRequestLimits?
  parameters         Parameters?
  createdAt          DateTime          @default(now())
}

model Architecture {
  id            Int     @id @default(autoincrement())
  tokenizer     String?
  instruct_type String?
  modality      String?
  model         Model   @relation(fields: [modelId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  modelId       String  @unique
}

model Pricing {
  id         Int     @id @default(autoincrement())
  prompt     String?
  completion String?
  request    String?
  image      String?
  model      Model   @relation(fields: [modelId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  modelId    String  @unique
}

model TopProvider {
  id                    Int      @id @default(autoincrement())
  context_length        Int?
  max_completion_tokens Int?
  is_moderated          Boolean?
  model                 Model    @relation(fields: [modelId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  modelId               String   @unique
}

model PerRequestLimits {
  id                Int    @id @default(autoincrement())
  prompt_tokens     String?
  completion_tokens String?
  model             Model  @relation(fields: [modelId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  modelId           String @unique
}

model Parameters {
  id                     Int                   @id @default(autoincrement())
  model                  String?
  supported_parameters   SupportedParameters[]
  frequency_penalty_p10  Float?
  frequency_penalty_p50  Float?
  frequency_penalty_p90  Float?
  min_p_p10              Float?
  min_p_p50              Float?
  min_p_p90              Float?
  presence_penalty_p10   Float?
  presence_penalty_p50   Float?
  presence_penalty_p90   Float?
  repetition_penalty_p10 Float?
  repetition_penalty_p50 Float?
  repetition_penalty_p90 Float?
  temperature_p10        Float?
  temperature_p50        Float?
  temperature_p90        Float?
  top_a_p10              Float?
  top_a_p50              Float?
  top_a_p90              Float?
  top_k_p10              Float?
  top_k_p50              Float?
  top_k_p90              Float?
  top_p_p10              Float?
  top_p_p50              Float?
  top_p_p90              Float?
  model_                 Model                 @relation(fields: [modelId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  modelId                String                @unique
}

model SupportedParameters {
  id           Int         @id @default(autoincrement())
  name         String
  Parameters   Parameters? @relation(fields: [parametersId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  parametersId Int?        @unique
}
